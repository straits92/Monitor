package com.example.monitor.databases;

import android.content.Context;
import android.os.AsyncTask;
import android.util.Log;

import androidx.annotation.NonNull;
import androidx.room.Database;
import androidx.room.Room;
import androidx.room.RoomDatabase;
import androidx.sqlite.db.SupportSQLiteDatabase;

import com.example.monitor.backgroundutil.ExecutorHelper;
import com.example.monitor.models.MonitorLocation;

import java.util.concurrent.ExecutorService;

/* handled by weather repository, not its own repository */
@Database(entities = {MonitorLocation.class}, version = 1)
public abstract class LocationDatabase extends RoomDatabase {
    private static final String TAG = "LocationDatabase:";
    private static LocationDatabase instance;

    private static ExecutorService executor;
    private LocationDao locationDao = locationDao();

    /* code for method is autogenerated by Room */
    public abstract LocationDao locationDao();

    /* turn this class into a singleton; always use same instance everywhere */
    public static synchronized LocationDatabase getInstance(Context context) {
        if (instance == null) {
            executor = ExecutorHelper.getSingleThreadExecutorInstance();
            instance = Room.databaseBuilder(context.getApplicationContext(),
                    LocationDatabase.class,"location_database")
                    .fallbackToDestructiveMigration()/* deletes previous version db content */
                    .addCallback(roomCallback)/* call right after creating the instance for setup  */
                    .build();

            Log.d(TAG, "getInstance: LocationDatabase instantiated!");
        }
        return instance;
    }

    /* sets up its own initial location */
    private static RoomDatabase.Callback roomCallback = new RoomDatabase.Callback() {
        @Override
        public void onCreate(@NonNull SupportSQLiteDatabase db) {
            super.onCreate(db);

            /* initially populate database here, on a bg thread */
            /* with the asynctask*/
//            new SetLocationBackgroundTask(instance).execute();

            /* embedded default location is Belgrade */
            String location = "298198";
            String localizedName = "Belgrade";
            String latitude = "44.8125";
            String longitude = "20.4612";
            boolean isGpsAvailable = false;
            instance.locationDao().insert(new MonitorLocation(location, localizedName, latitude, longitude, isGpsAvailable));
            Log.d(TAG, "Initial default location set as city: "+"Belgrade"+", code: "+"298198");

            /* with the callable is currently not working */
        }
    };

    /* to be done asynchronously using android GPS functionality; currently uses hardcoded info */
    private static class SetLocationBackgroundTask extends AsyncTask<Void, Void, Void> {
        private LocationDao locationDao;

        private SetLocationBackgroundTask(LocationDatabase db) {
            locationDao = db.locationDao();
        }

        @Override
        protected Void doInBackground(Void... voids) {
            /* default values */
            String location = "298198";
            String localizedName = "Belgrade";
            String latitude = "44.8125";
            String longitude = "20.4612";
            boolean isGpsAvailable = false;
            locationDao.insert(new MonitorLocation(location, localizedName, latitude, longitude, isGpsAvailable));
            Log.d(TAG, "Initial default location set as city: "+"Belgrade"+", code: "+"298198");
            return null;
        }
    }

}
